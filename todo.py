import sys
import sqlite3
import warnings
import os
from datetime import datetime
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                           QHBoxLayout, QPushButton, QLineEdit, QListWidget, 
                           QLabel, QComboBox, QCalendarWidget, QMessageBox,
                           QFrame, QScrollArea, QSizePolicy, QListWidgetItem,
                           QMenu, QDialog, QSystemTrayIcon)
from PyQt5.QtCore import Qt, QDate, QMimeData, QSize, QPoint, QUrl
from PyQt5.QtGui import QIcon, QFont, QDrag, QColor, QPalette, QLinearGradient, QGradient, QPixmap
from PyQt5.QtMultimedia import QMediaPlayer, QMediaContent

# PyQt5 uyarƒ±larƒ±nƒ± bastƒ±r
warnings.filterwarnings("ignore", category=DeprecationWarning)

def resource_path(relative_path):
    """PyInstaller ile paketlenmi≈ü uygulamalar i√ßin kaynak dosya yolunu √ß√∂zer."""
    try:
        # PyInstaller olu≈üturduƒüu ge√ßici klas√∂r
        base_path = sys._MEIPASS
    except Exception:
        # Ge√ßici klas√∂r yoksa mevcut dizini kullan
        base_path = os.path.abspath(".")
    
    return os.path.join(base_path, relative_path)

# Ses oynatƒ±cƒ±larƒ±
ADD_PLAYER = None
DELETE_PLAYER = None
MOVE_PLAYER = None

def init_sounds():
    global ADD_PLAYER, DELETE_PLAYER, MOVE_PLAYER
    try:
        ADD_PLAYER = QMediaPlayer()
        ADD_PLAYER.setMedia(QMediaContent(QUrl.fromLocalFile(resource_path("add.wav"))))
        
        DELETE_PLAYER = QMediaPlayer()
        DELETE_PLAYER.setMedia(QMediaContent(QUrl.fromLocalFile(resource_path("delete.wav"))))
        
        MOVE_PLAYER = QMediaPlayer()
        MOVE_PLAYER.setMedia(QMediaContent(QUrl.fromLocalFile(resource_path("move.wav"))))
    except Exception as e:
        print(f"Ses y√ºkleme hatasƒ±: {e}")

def play_add_sound():
    if ADD_PLAYER:
        ADD_PLAYER.setPosition(0)
        ADD_PLAYER.play()

def play_delete_sound():
    if DELETE_PLAYER:
        DELETE_PLAYER.setPosition(0)
        DELETE_PLAYER.play()

def play_move_sound():
    if MOVE_PLAYER:
        MOVE_PLAYER.setPosition(0)
        MOVE_PLAYER.play()

class TaskCard(QWidget):
    def __init__(self, task_id, title, category, priority, due_date, parent=None):
        super().__init__(parent)
        self.task_id = task_id
        self.title = title
        self.category = category
        self.priority = priority
        self.due_date = due_date
        self.setMinimumHeight(80)
        self.setFixedWidth(320)
        self.dark_mode = False
        
        layout = QVBoxLayout(self)
        layout.setSpacing(4)
        layout.setContentsMargins(8, 8, 8, 8)
        layout.setAlignment(Qt.AlignCenter)
        
        # Ba≈ülƒ±k
        self.title_label = QLabel(title)
        self.title_label.setFont(QFont("Segoe UI", 10, QFont.Bold))
        self.title_label.setWordWrap(True)
        self.title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.title_label)
        
        # Alt bilgiler i√ßin container
        bottom_widget = QWidget()
        bottom_layout = QHBoxLayout(bottom_widget)
        bottom_layout.setContentsMargins(0, 0, 0, 0)
        bottom_layout.setSpacing(8)
        bottom_layout.setAlignment(Qt.AlignCenter)
        
        # √ñncelik ve tarih
        self.priority_label = QLabel(f"‚ö° {priority}")
        self.priority_label.setFont(QFont("Segoe UI", 9))
        
        # Tarihi kƒ±salt
        date_obj = QDate.fromString(due_date, "yyyy-MM-dd")
        formatted_date = date_obj.toString("dd.MM.yy")
        self.date_label = QLabel(f"üìÖ {formatted_date}")
        self.date_label.setFont(QFont("Segoe UI", 9))
        
        bottom_layout.addWidget(self.priority_label)
        bottom_layout.addWidget(self.date_label)
        
        layout.addWidget(bottom_widget)
        
        # Renk ve stil ayarlarƒ±
        self.updateStyle()

    def updateStyle(self, dark_mode=False):
        self.dark_mode = dark_mode
        text_color = "#ffffff" if dark_mode else "#1a202c"
        
        if self.priority == "Y√ºksek":
            if dark_mode:
                color = "#9B2C2C"
                gradient = "#C53030"
                border = "#FC8181"
            else:
                color = "#FFF5F5"
                gradient = "#FED7D7"
                border = "#FEB2B2"
        elif self.priority == "Orta":
            if dark_mode:
                color = "#975A16"
                gradient = "#B7791F"
                border = "#F6AD55"
            else:
                color = "#FFFAF0"
                gradient = "#FEEBC8"
                border = "#FBD38D"
        else:
            if dark_mode:
                color = "#276749"
                gradient = "#2F855A"
                border = "#68D391"
            else:
                color = "#F0FFF4"
                gradient = "#C6F6D5"
                border = "#9AE6B4"
            
        # Ana widget stili
        self.setStyleSheet(f"""
            QWidget {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                          stop:0 {color}, stop:1 {gradient});
                border: 2px solid {border};
                border-radius: 8px;
            }}
            QLabel {{
                color: {text_color}; 
                background: transparent; 
                padding: 3px;
                font-weight: bold;
            }}
        """)

class TaskList(QListWidget):
    def __init__(self, title, parent=None):
        super().__init__(parent)
        self.setViewMode(QListWidget.ListMode)
        self.setFlow(QListWidget.TopToBottom)
        self.setSpacing(10)
        self.setWrapping(False)
        self.setMinimumWidth(350)
        self.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
        self.title = title
        self.updateStyle()
        
        # Saƒü tƒ±k men√ºs√ºn√º etkinle≈ütir
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.show_context_menu)
        
        # ƒ∞√ßeriƒüi ortala
        self.setVerticalScrollMode(QListWidget.ScrollPerPixel)
        self.setHorizontalScrollMode(QListWidget.ScrollPerPixel)
        
        # Liste √∂ƒüelerinin hizalamasƒ±nƒ± ayarla
        self.setStyleSheet("""
            QListWidget::item {
                margin-left: 15px;
                margin-right: 15px;
            }
        """)
        
    def delete_task(self, task_id):
        msg = QMessageBox()
        msg.setWindowTitle("G√∂revi Sil")
        msg.setText("Bu g√∂revi silmek istediƒüinizden emin misiniz?")
        msg.setIcon(QMessageBox.Question)
        msg.setStandardButtons(QMessageBox.Yes | QMessageBox.No)
        msg.setDefaultButton(QMessageBox.No)
        
        # Tema renklerini uygula
        dark_theme = self.window().dark_theme
        msg.setStyleSheet("""
            QMessageBox {
                background-color: """ + ("#2d3748" if dark_theme else "white") + """;
            }
            QMessageBox QLabel {
                color: """ + ("white" if dark_theme else "#1a202c") + """;
                font-size: 12px;
            }
            QPushButton {
                background-color: """ + ("#4299e1" if dark_theme else "#3182ce") + """;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: """ + ("#3182ce" if dark_theme else "#2c5282") + """;
            }
        """)
        
        # Evet ve Hayƒ±r butonlarƒ±nƒ±n metinlerini T√ºrk√ße yap
        yes_button = msg.button(QMessageBox.Yes)
        no_button = msg.button(QMessageBox.No)
        yes_button.setText('Evet')
        no_button.setText('Hayƒ±r')
        
        if msg.exec_() == QMessageBox.Yes:
            window = self.window()
            window.cursor.execute("DELETE FROM tasks WHERE id = ?", (task_id,))
            window.conn.commit()
            play_delete_sound()
            return True
        return False

    def show_context_menu(self, position):
        item = self.itemAt(position)
        if not item:
            return
            
        menu = QMenu(self)
        edit_action = menu.addAction("‚úèÔ∏è D√ºzenle")
        delete_action = menu.addAction("üóëÔ∏è Sil")
        menu.addSeparator()
        
        # Ta≈üƒ±ma men√ºs√º
        move_menu = QMenu("üì¶ Ta≈üƒ±", menu)
        categories = ["Yapƒ±lacak", "Yapƒ±lƒ±yor", "Bitti", "Dilek Listesi"]
        move_actions = {}
        
        for category in categories:
            if category != self.title:  # Mevcut kategoriyi hari√ß tut
                action = move_menu.addAction(category)
                move_actions[action] = category
                
        menu.addMenu(move_menu)
        
        # Men√ºy√º g√∂ster ve se√ßilen aksiyonu al
        action = menu.exec_(self.mapToGlobal(position))
        
        if not action:
            return
            
        current_widget = self.itemWidget(item)
        
        if action == edit_action:
            # G√∂revi d√ºzenle
            window = self.window()
            window.edit_task(current_widget)
            play_add_sound()
        elif action == delete_action:
            # G√∂revi sil (onay ile)
            if self.delete_task(current_widget.task_id):
                self.takeItem(self.row(item))
        elif action in move_actions:
            # G√∂revi ta≈üƒ±
            new_category = move_actions[action]
            window = self.window()
            window.update_task_category(current_widget.task_id, new_category)
            play_move_sound()
            window.load_tasks()  # Listeleri yenile
        
    def updateStyle(self, dark=False):
        if dark:
            bg_start = "#2d3748"
            bg_end = "#1a202c"
            border = "#4a5568"
            text = "#ffffff"
        else:
            bg_start = "#f8fafc"
            bg_end = "#edf2f7"
            border = "#e2e8f0"
            text = "#2d3748"
            
        self.setStyleSheet(f"""
            QListWidget {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                          stop:0 {bg_start}, stop:1 {bg_end});
                border: 2px solid {border};
                border-radius: 12px;
                padding: 15px;
                color: {text};
            }}
            QListWidget::item {{
                background-color: transparent;
                border: none;
                margin-left: 15px;
                margin-right: 15px;
            }}
            QListWidget::item:selected {{
                background: transparent;
                border: none;
                outline: none;
            }}
            QListWidget::item:hover {{
                background: transparent;
                border: none;
                outline: none;
            }}
            QMenu {{
                background-color: {bg_start};
                color: {text};
                border: 1px solid {border};
                border-radius: 8px;
                padding: 5px;
            }}
            QMenu::item {{
                padding: 8px 25px;
                border-radius: 4px;
            }}
            QMenu::item:selected {{
                background-color: rgba(49, 130, 206, 0.1);
            }}
            QMenu::separator {{
                height: 1px;
                background-color: {border};
                margin: 5px 0px;
            }}
        """)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_Delete:
            current_item = self.currentItem()
            if current_item:
                current_widget = self.itemWidget(current_item)
                if current_widget:
                    # G√∂revi sil (onay ile)
                    if self.delete_task(current_widget.task_id):
                        self.takeItem(self.row(current_item))
        elif event.key() == Qt.Key_E:  # E tu≈üuna basƒ±ldƒ±ƒüƒ±nda
            current_item = self.currentItem()
            if current_item:
                current_widget = self.itemWidget(current_item)
                if current_widget:
                    # G√∂revi d√ºzenle
                    window = self.window()
                    window.edit_task(current_widget)
                    play_add_sound()
        # Shift + Saƒü/Sol ok tu≈ülarƒ± i√ßin kontrol
        elif event.modifiers() == Qt.ShiftModifier:
            current_item = self.currentItem()
            if current_item:
                current_widget = self.itemWidget(current_item)
                if current_widget:
                    categories = ["Yapƒ±lacak", "Yapƒ±lƒ±yor", "Bitti", "Dilek Listesi"]
                    current_index = categories.index(current_widget.category)
                    
                    if event.key() == Qt.Key_Right and current_index < len(categories) - 1:
                        # Saƒüa ta≈üƒ±
                        new_category = categories[current_index + 1]
                        window = self.window()
                        window.update_task_category(current_widget.task_id, new_category)
                        play_move_sound()
                        window.load_tasks()
                    elif event.key() == Qt.Key_Left and current_index > 0:
                        # Sola ta≈üƒ±
                        new_category = categories[current_index - 1]
                        window = self.window()
                        window.update_task_category(current_widget.task_id, new_category)
                        play_move_sound()
                        window.load_tasks()
        else:
            super().keyPressEvent(event)

class TodoApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Ta-Du")
        
        # ƒ∞lk minimize kontrol√º i√ßin flag
        self.first_minimize = True
        
        # T√ºm pencere kontrollerini kaldƒ±r ve sadece tam ekran olarak ayarla
        self.setWindowFlags(
            Qt.Window |
            Qt.FramelessWindowHint  # T√ºm pencere dekorasyonlarƒ±nƒ± kaldƒ±r
        )
        
        # Her zaman tam ekran olarak ayarla
        self.showFullScreen()
        
        # Veritabanƒ± klas√∂r√ºn√º olu≈ütur ve baƒülantƒ±yƒ± kur
        db_folder = os.path.join(os.path.expanduser("~"), "Documents", "Ta-Du")
        os.makedirs(db_folder, exist_ok=True)
        db_path = os.path.join(db_folder, "tasks.db")
        self.conn = sqlite3.connect(db_path)
        self.cursor = self.conn.cursor()
        self.create_tables()
        
        # Kaydedilmi≈ü tema tercihini y√ºkle
        self.dark_theme = self.load_theme_preference()
        
        # Logo ayarla
        self.setWindowIcon(QIcon(resource_path('tadu.ico')))
        
        # Sistem tepsisi ikonu olu≈ütur
        self.tray_icon = QSystemTrayIcon(self)
        self.tray_icon.setIcon(QIcon(resource_path('tadu.ico')))
        self.tray_icon.setToolTip('Ta-Du')
        
        # Tepsi men√ºs√º
        tray_menu = QMenu()
        show_action = tray_menu.addAction("G√∂ster")
        quit_action = tray_menu.addAction("√áƒ±kƒ±≈ü")
        
        show_action.triggered.connect(self.showNormal)
        quit_action.triggered.connect(app.quit)
        
        self.tray_icon.setContextMenu(tray_menu)
        self.tray_icon.activated.connect(self.tray_icon_activated)
        self.tray_icon.show()
        
        # Ana widget ve layout
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QVBoxLayout(self.central_widget)
        self.main_layout.setSpacing(20)
        self.main_layout.setContentsMargins(20, 20, 20, 20)
        
        # √úst panel container (Ba≈ülƒ±k ve kapatma butonu i√ßin)
        top_container = QWidget()
        top_container_layout = QHBoxLayout(top_container)
        top_container_layout.setContentsMargins(0, 0, 0, 0)
        
        # Ta-Du ba≈ülƒ±ƒüƒ±
        title_container = QWidget()
        title_layout = QHBoxLayout(title_container)
        title_layout.setContentsMargins(0, 0, 0, 0)
        title_layout.setSpacing(5)
        
        title_label = QLabel("Ta-Du")
        title_label.setFont(QFont("Segoe UI", 16, QFont.Bold))
        title_label.setStyleSheet(f"color: {'white' if self.dark_theme else '#1a202c'};")
        
        version_label = QLabel("v1.1.0")
        version_label.setFont(QFont("Segoe UI", 8))
        version_label.setStyleSheet(f"color: {'white' if self.dark_theme else '#1a202c'}; padding-top: 5px;")
        
        title_layout.addWidget(title_label)
        title_layout.addWidget(version_label)
        title_layout.addStretch()
        
        top_container_layout.addWidget(title_container)
        
        # Bo≈ü widget ile saƒüa doƒüru it
        spacer = QWidget()
        spacer.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        top_container_layout.addWidget(spacer)
        
        # Kapatma butonu
        close_button = QPushButton("‚úñ", self)
        close_button.setFont(QFont("Segoe UI", 14))
        close_button.setCursor(Qt.PointingHandCursor)
        close_button.clicked.connect(self.minimize_to_tray)
        close_button.setFixedSize(40, 40)
        close_button.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                color: """ + ("white" if self.dark_theme else "#1a202c") + """;
                padding: 0px;
            }
            QPushButton:hover {
                color: #e53e3e;
            }
        """)
        top_container_layout.addWidget(close_button)
        
        # Top container'ƒ± ana layout'a ekle
        self.main_layout.addWidget(top_container)
        
        # √úst panel (G√∂rev ekleme)
        self.setup_top_panel()
        
        # Kartlar alanƒ±
        self.setup_cards_area()
        
        # Tema deƒüi≈ütirme butonu ve yardƒ±m butonu i√ßin container
        buttons_container = QWidget()
        buttons_layout = QHBoxLayout(buttons_container)
        buttons_layout.setSpacing(10)
        buttons_layout.setContentsMargins(0, 0, 0, 0)
        
        self.theme_button = QPushButton("üé® Tema Deƒüi≈ütir")
        self.theme_button.setFont(QFont("Segoe UI", 11, QFont.Bold))
        self.theme_button.clicked.connect(self.toggle_theme)
        self.theme_button.setCursor(Qt.PointingHandCursor)
        
        self.help_button = QPushButton("‚ùî Nasƒ±l Kullanƒ±lƒ±r")
        self.help_button.setFont(QFont("Segoe UI", 11, QFont.Bold))
        self.help_button.clicked.connect(self.show_help)
        self.help_button.setCursor(Qt.PointingHandCursor)
        
        self.dev_button = QPushButton("üë®‚Äçüíª Geli≈ütirici")
        self.dev_button.setFont(QFont("Segoe UI", 11, QFont.Bold))
        self.dev_button.clicked.connect(self.show_developer)
        self.dev_button.setCursor(Qt.PointingHandCursor)
        
        buttons_layout.addWidget(self.theme_button)
        buttons_layout.addWidget(self.help_button)
        buttons_layout.addWidget(self.dev_button)
        
        self.main_layout.addWidget(buttons_container)
        
        # √ñnce tema ayarƒ±nƒ± uygula
        self.apply_theme()
        
        # Sonra g√∂revleri y√ºkle
        self.load_tasks()

    def resizeEvent(self, event):
        super().resizeEvent(event)
        # Kapatma butonunu yeniden konumlandƒ±r ve en √ºstte tut
        close_button = self.findChild(QPushButton, "")
        if close_button and close_button.text() == "‚úñ":
            close_button.move(self.width() - 50, 10)
            close_button.raise_()  # Her boyut deƒüi≈üiminde en √ºstte tut

    def changeEvent(self, event):
        if event.type() == Qt.WindowState:
            # Her zaman tam ekran modunda tut
            if not self.isFullScreen():
                self.showFullScreen()
            event.accept()

    def tray_icon_activated(self, reason):
        if reason == QSystemTrayIcon.DoubleClick:
            self.showNormal()
            self.activateWindow()

    def showEvent(self, event):
        # Pencere g√∂sterildiƒüinde tam ekran yap
        self.showFullScreen()
        super().showEvent(event)

    def closeEvent(self, event):
        # √áarpƒ±ya basƒ±ldƒ±ƒüƒ±nda sistem tepsisine k√º√ß√ºlt
        if self.tray_icon.isVisible():
            self.hide()
            event.ignore()
        else:
            self.conn.close()
            event.accept()

    def keyPressEvent(self, event):
        # Alt+Tab tu≈ü kombinasyonu i√ßin
        if event.key() == Qt.Key_Tab and event.modifiers() == Qt.AltModifier:
            self.hide()
        super().keyPressEvent(event)

    def setup_top_panel(self):
        self.top_panel = QWidget()
        self.top_layout = QHBoxLayout(self.top_panel)
        self.top_layout.setSpacing(15)
        self.top_layout.setContentsMargins(10, 10, 10, 10)
        
        # G√∂rev ekleme alanƒ±
        input_container = QWidget()
        input_layout = QVBoxLayout(input_container)
        input_layout.setSpacing(2)
        input_layout.setContentsMargins(0, 0, 0, 0)
        
        input_label = QLabel("üìù G√∂rev")
        input_label.setFont(QFont("Segoe UI", 10))
        input_layout.addWidget(input_label)
        
        self.task_input = QLineEdit()
        self.task_input.setPlaceholderText("‚úçÔ∏è Yeni g√∂rev ekle...")
        self.task_input.setMinimumWidth(400)
        self.task_input.setFont(QFont("Segoe UI", 11))
        self.task_input.returnPressed.connect(self.add_task)
        input_layout.addWidget(self.task_input)
        
        # √ñncelik se√ßici
        priority_container = QWidget()
        priority_layout = QVBoxLayout(priority_container)
        priority_layout.setSpacing(2)
        priority_layout.setContentsMargins(0, 0, 0, 0)
        
        priority_label = QLabel("üéØ √ñncelik")
        priority_label.setFont(QFont("Segoe UI", 10))
        priority_layout.addWidget(priority_label)
        
        self.priority_combo = QComboBox()
        self.priority_combo.addItems(["D√º≈ü√ºk", "Orta", "Y√ºksek"])
        self.priority_combo.setFont(QFont("Segoe UI", 11))
        self.priority_combo.setFixedWidth(120)
        priority_layout.addWidget(self.priority_combo)
        
        # Kategori se√ßici
        category_container = QWidget()
        category_layout = QVBoxLayout(category_container)
        category_layout.setSpacing(2)
        category_layout.setContentsMargins(0, 0, 0, 0)
        
        category_label = QLabel("üìã Kategori")
        category_label.setFont(QFont("Segoe UI", 10))
        category_layout.addWidget(category_label)
        
        self.category_combo = QComboBox()
        self.category_combo.addItems(["Yapƒ±lacak", "Yapƒ±lƒ±yor", "Bitti", "Dilek Listesi"])
        self.category_combo.setFont(QFont("Segoe UI", 11))
        self.category_combo.setFixedWidth(150)
        category_layout.addWidget(self.category_combo)
        
        # Tarih se√ßici container
        date_container = QWidget()
        date_layout = QVBoxLayout(date_container)
        date_layout.setSpacing(2)
        date_layout.setContentsMargins(0, 0, 0, 0)
        
        date_label = QLabel("üìÖ Tarih")
        date_label.setFont(QFont("Segoe UI", 10))
        date_layout.addWidget(date_label)
        
        self.date_button = QPushButton("üìÖ Tarih Se√ß")
        self.date_button.setObjectName("dateButton")  # Stil i√ßin √∂zel ID
        self.date_button.setFont(QFont("Segoe UI", 11))
        self.date_button.setFixedWidth(120)
        self.date_button.clicked.connect(self.show_calendar)
        self.date_button.setCursor(Qt.PointingHandCursor)
        date_layout.addWidget(self.date_button)
        
        self.selected_date = QDate.currentDate()
        
        # Ekle butonu container
        add_container = QWidget()
        add_layout = QVBoxLayout(add_container)
        add_layout.setSpacing(2)
        add_layout.setContentsMargins(0, 0, 0, 0)
        
        # Bo≈ü label ekleyerek hizalama
        empty_label = QLabel("")
        empty_label.setFont(QFont("Segoe UI", 10))
        add_layout.addWidget(empty_label)
        
        self.add_button = QPushButton("‚ûï Ekle")
        self.add_button.setFont(QFont("Segoe UI", 11, QFont.Bold))
        self.add_button.clicked.connect(self.add_task)
        self.add_button.setCursor(Qt.PointingHandCursor)
        self.add_button.setFixedWidth(100)
        add_layout.addWidget(self.add_button)
        
        # √úst panel bile≈üenleri
        self.top_layout.addWidget(input_container, 4)
        self.top_layout.addWidget(priority_container, 1)
        self.top_layout.addWidget(category_container, 1)
        self.top_layout.addWidget(date_container, 1)
        self.top_layout.addWidget(add_container, 1)
        
        self.main_layout.addWidget(self.top_panel)
        
    def setup_cards_area(self):
        self.cards_widget = QWidget()
        self.cards_layout = QHBoxLayout(self.cards_widget)
        self.cards_layout.setSpacing(20)
        
        # Liste alanlarƒ±
        self.todo_list = TaskList("Yapƒ±lacak")
        self.doing_list = TaskList("Yapƒ±lƒ±yor")
        self.done_list = TaskList("Bitti")
        self.wishlist = TaskList("Dilek Listesi")
        
        # Liste ba≈ülƒ±klarƒ± ve containerlar
        todo_container = QWidget()
        todo_layout = QVBoxLayout(todo_container)
        self.todo_title = QLabel("üìã Yapƒ±lacak")
        self.todo_title.setFont(QFont("Segoe UI", 14, QFont.Bold))
        todo_layout.addWidget(self.todo_title)
        todo_layout.addWidget(self.todo_list)
        
        doing_container = QWidget()
        doing_layout = QVBoxLayout(doing_container)
        self.doing_title = QLabel("üîÑ Yapƒ±lƒ±yor")
        self.doing_title.setFont(QFont("Segoe UI", 14, QFont.Bold))
        doing_layout.addWidget(self.doing_title)
        doing_layout.addWidget(self.doing_list)
        
        done_container = QWidget()
        done_layout = QVBoxLayout(done_container)
        self.done_title = QLabel("‚úÖ Bitti")
        self.done_title.setFont(QFont("Segoe UI", 14, QFont.Bold))
        done_layout.addWidget(self.done_title)
        done_layout.addWidget(self.done_list)
        
        wishlist_container = QWidget()
        wishlist_layout = QVBoxLayout(wishlist_container)
        self.wishlist_title = QLabel("‚≠ê Dilek Listesi")
        self.wishlist_title.setFont(QFont("Segoe UI", 14, QFont.Bold))
        wishlist_layout.addWidget(self.wishlist_title)
        wishlist_layout.addWidget(self.wishlist)
        
        self.cards_layout.addWidget(todo_container)
        self.cards_layout.addWidget(doing_container)
        self.cards_layout.addWidget(done_container)
        self.cards_layout.addWidget(wishlist_container)
        
        self.main_layout.addWidget(self.cards_widget)
        
    def create_tables(self):
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS tasks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title TEXT NOT NULL,
            category TEXT NOT NULL,
            priority TEXT NOT NULL,
            due_date TEXT NOT NULL,
            completed INTEGER DEFAULT 0
        )
        ''')
        
        # Tema tercihi i√ßin tablo olu≈ütur
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS settings (
            key TEXT PRIMARY KEY,
            value TEXT NOT NULL
        )
        ''')
        self.conn.commit()
        
    def load_theme_preference(self):
        self.cursor.execute("SELECT value FROM settings WHERE key = 'theme'")
        result = self.cursor.fetchone()
        return result[0] == 'dark' if result else False
        
    def save_theme_preference(self):
        theme_value = 'dark' if self.dark_theme else 'light'
        self.cursor.execute("""
            INSERT OR REPLACE INTO settings (key, value)
            VALUES ('theme', ?)
        """, (theme_value,))
        self.conn.commit()
        
    def toggle_theme(self):
        self.dark_theme = not self.dark_theme
        self.save_theme_preference()
        self.apply_theme()
        
    def apply_theme(self):
        # Liste stillerini g√ºncelle
        self.todo_list.updateStyle(self.dark_theme)
        self.doing_list.updateStyle(self.dark_theme)
        self.done_list.updateStyle(self.dark_theme)
        self.wishlist.updateStyle(self.dark_theme)
        
        # Ba≈ülƒ±k renklerini g√ºncelle
        title_color = "white" if self.dark_theme else "#2d3748"
        for title in [self.todo_title, self.doing_title, self.done_title, self.wishlist_title]:
            title.setStyleSheet(f"color: {title_color}; background: transparent;")
            
        # Ta-Du ba≈ülƒ±ƒüƒ± ve versiyon etiketinin rengini g√ºncelle
        for label in self.findChildren(QLabel):
            if label.text() == "Ta-Du":
                label.setStyleSheet(f"color: {'white' if self.dark_theme else '#1a202c'}; background: transparent;")
            elif label.text() == "v1.1.0":
                label.setStyleSheet(f"color: {'white' if self.dark_theme else '#1a202c'}; background: transparent; padding-top: 5px;")
            
        # Kapatma butonunun rengini g√ºncelle
        for button in self.findChildren(QPushButton):
            if button.text() == "‚úñ":
                button.setStyleSheet("""
                    QPushButton {
                        background-color: transparent;
                        border: none;
                        color: """ + ("white" if self.dark_theme else "#1a202c") + """;
                        padding: 0px;
                    }
                    QPushButton:hover {
                        color: #e53e3e;
                    }
                """)
        
        if self.dark_theme:
            self.setStyleSheet("""
                QMainWindow, QWidget { 
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                              stop:0 #1a202c, stop:1 #2d3748); 
                }
                QPushButton { 
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                              stop:0 #4299e1, stop:1 #3182ce);
                    color: white; 
                    border: none; 
                    padding: 12px; 
                    border-radius: 8px;
                }
                QPushButton:hover { 
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                              stop:0 #3182ce, stop:1 #2c5282);
                }
                QPushButton#dateButton {
                    background: #2d3748;
                    border: 2px solid #4a5568;
                    color: white;
                    padding: 8px 16px;
                    text-align: left;
                    font-weight: normal;
                }
                QPushButton#dateButton:hover {
                    background: #4a5568;
                    border: 2px solid #718096;
                }
                QLineEdit { 
                    background-color: #2d3748; 
                    color: white; 
                    border: 2px solid #4a5568;
                    padding: 8px 12px;
                    border-radius: 8px;
                    min-height: 20px;
                }
                QComboBox {
                    background-color: #2d3748;
                    color: white;
                    border: 2px solid #4a5568;
                    border-radius: 8px;
                    padding: 4px 8px;
                    min-height: 20px;
                    margin: 0px;
                }
                QComboBox::drop-down {
                    border: none;
                    padding-right: 8px;
                }
                QComboBox::down-arrow {
                    image: none;
                    width: 0px;
                    height: 0px;
                }
                QComboBox QAbstractItemView {
                    background-color: #2d3748;
                    color: white;
                    selection-background-color: #4299e1;
                    border: 2px solid #4a5568;
                    border-radius: 8px;
                    padding: 4px;
                    outline: none;
                }
                QComboBox QAbstractItemView::item {
                    padding: 4px 8px;
                    min-height: 20px;
                    border: none;
                }
                QComboBox QAbstractItemView::item:hover {
                    background-color: #4a5568;
                }
                QComboBox QAbstractItemView::item:selected {
                    background-color: #4299e1;
                }
                QCalendarWidget { 
                    background-color: #2d3748; 
                    color: white;
                    selection-background-color: #4299e1;
                }
                QLabel {
                    color: white;
                    font-size: 14px;
                    background: transparent;
                }
            """)
        else:
            self.setStyleSheet("""
                QMainWindow, QWidget { 
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                              stop:0 #f7fafc, stop:1 #edf2f7);
                }
                QPushButton { 
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                              stop:0 #4299e1, stop:1 #3182ce);
                    color: white; 
                    border: none; 
                    padding: 12px; 
                    border-radius: 8px;
                }
                QPushButton:hover { 
                    background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                                              stop:0 #3182ce, stop:1 #2c5282);
                }
                QPushButton#dateButton {
                    background: white;
                    border: 2px solid #e2e8f0;
                    color: #2d3748;
                    padding: 8px 16px;
                    text-align: left;
                    font-weight: normal;
                }
                QPushButton#dateButton:hover {
                    background: #f7fafc;
                    border: 2px solid #cbd5e0;
                }
                QLineEdit { 
                    background-color: white; 
                    color: #2d3748; 
                    border: 2px solid #e2e8f0;
                    padding: 8px 12px;
                    border-radius: 8px;
                    min-height: 20px;
                }
                QComboBox {
                    background-color: white;
                    color: #2d3748;
                    border: 2px solid #e2e8f0;
                    border-radius: 8px;
                    padding: 4px 8px;
                    min-height: 20px;
                    margin: 0px;
                }
                QComboBox::drop-down {
                    border: none;
                    padding-right: 8px;
                }
                QComboBox::down-arrow {
                    image: none;
                    width: 0px;
                    height: 0px;
                }
                QComboBox QAbstractItemView {
                    background-color: white;
                    color: #2d3748;
                    selection-background-color: #4299e1;
                    border: 2px solid #e2e8f0;
                    border-radius: 8px;
                    padding: 4px;
                    outline: none;
                }
                QComboBox QAbstractItemView::item {
                    padding: 4px 8px;
                    min-height: 20px;
                    border: none;
                }
                QComboBox QAbstractItemView::item:hover {
                    background-color: #edf2f7;
                }
                QComboBox QAbstractItemView::item:selected {
                    background-color: #4299e1;
                    color: white;
                }
                QCalendarWidget { 
                    background-color: white; 
                    color: #2d3748;
                    selection-background-color: #4299e1;
                }
                QLabel {
                    color: #2d3748;
                    font-size: 14px;
                    background: transparent;
                }
            """)
            
        # T√ºm kartlarƒ±n stillerini g√ºncelle
        self.update_all_cards_style()
        
    def update_all_cards_style(self):
        # T√ºm listelerdeki kartlarƒ± g√ºncelle
        lists = [self.todo_list, self.doing_list, self.done_list, self.wishlist]
        for task_list in lists:
            for i in range(task_list.count()):
                item = task_list.item(i)
                card = task_list.itemWidget(item)
                if card:
                    card.updateStyle(self.dark_theme)
            
    def show_calendar(self):
        calendar = QCalendarWidget(self)
        calendar.setMinimumDate(QDate.currentDate())
        calendar.setSelectedDate(self.selected_date)
        calendar.setWindowFlags(Qt.Popup | Qt.FramelessWindowHint)
        calendar.setFixedWidth(400)  # Takvim geni≈üliƒüini sabitle
        
        # Takvim stilini ayarla
        if self.dark_theme:
            calendar.setStyleSheet("""
                QCalendarWidget {
                    background-color: #2d3748;
                    border: 2px solid #4a5568;
                    border-radius: 12px;
                }
                QCalendarWidget QToolButton {
                    color: white;
                    background-color: transparent;
                    padding: 8px;
                    border: none;
                    border-radius: 4px;
                    font-size: 14px;
                    font-weight: bold;
                }
                QCalendarWidget QToolButton:hover {
                    background-color: #4a5568;
                }
                QCalendarWidget QMenu {
                    background-color: #2d3748;
                    color: white;
                    border: 1px solid #4a5568;
                    border-radius: 4px;
                }
                QCalendarWidget QSpinBox {
                    color: white;
                    background-color: #2d3748;
                    selection-background-color: #4299e1;
                    selection-color: white;
                    border: 1px solid #4a5568;
                    border-radius: 4px;
                    padding: 2px;
                }
                QCalendarWidget QTableView {
                    background-color: #2d3748;
                    selection-background-color: #4299e1;
                    selection-color: white;
                    outline: none;
                }
                QCalendarWidget QAbstractItemView:enabled {
                    color: white;
                    background-color: #2d3748;
                    selection-background-color: #4299e1;
                    selection-color: white;
                }
                QCalendarWidget QWidget#qt_calendar_navigationbar {
                    background-color: #1a202c;
                    border-top-left-radius: 12px;
                    border-top-right-radius: 12px;
                    padding: 4px;
                }
                QCalendarWidget QWidget#qt_calendar_prevmonth,
                QCalendarWidget QWidget#qt_calendar_nextmonth {
                    color: white;
                    qproperty-icon: none;
                    min-width: 32px;
                    max-width: 32px;
                    min-height: 32px;
                    max-height: 32px;
                }
                QCalendarWidget QWidget#qt_calendar_prevmonth {
                    qproperty-text: "‚óÄ";
                }
                QCalendarWidget QWidget#qt_calendar_nextmonth {
                    qproperty-text: "‚ñ∂";
                }
                QCalendarWidget QWidget { 
                    alternate-background-color: #2d3748;
                }
                QCalendarWidget QAbstractItemView:disabled {
                    color: #4a5568;
                }
            """)
        else:
            calendar.setStyleSheet("""
                QCalendarWidget {
                    background-color: white;
                    border: 2px solid #e2e8f0;
                    border-radius: 12px;
                }
                QCalendarWidget QToolButton {
                    color: #2d3748;
                    background-color: transparent;
                    padding: 8px;
                    border: none;
                    border-radius: 4px;
                    font-size: 14px;
                    font-weight: bold;
                }
                QCalendarWidget QToolButton:hover {
                    background-color: #edf2f7;
                }
                QCalendarWidget QMenu {
                    background-color: white;
                    color: #2d3748;
                    border: 1px solid #e2e8f0;
                    border-radius: 4px;
                }
                QCalendarWidget QSpinBox {
                    color: #2d3748;
                    background-color: white;
                    selection-background-color: #4299e1;
                    selection-color: white;
                    border: 1px solid #e2e8f0;
                    border-radius: 4px;
                    padding: 2px;
                }
                QCalendarWidget QTableView {
                    background-color: white;
                    selection-background-color: #4299e1;
                    selection-color: white;
                    outline: none;
                }
                QCalendarWidget QAbstractItemView:enabled {
                    color: #2d3748;
                    background-color: white;
                    selection-background-color: #4299e1;
                    selection-color: white;
                }
                QCalendarWidget QWidget#qt_calendar_navigationbar {
                    background-color: #f7fafc;
                    border-top-left-radius: 12px;
                    border-top-right-radius: 12px;
                    padding: 4px;
                }
                QCalendarWidget QWidget#qt_calendar_prevmonth,
                QCalendarWidget QWidget#qt_calendar_nextmonth {
                    color: #2d3748;
                    qproperty-icon: none;
                    min-width: 32px;
                    max-width: 32px;
                    min-height: 32px;
                    max-height: 32px;
                }
                QCalendarWidget QWidget#qt_calendar_prevmonth {
                    qproperty-text: "‚óÄ";
                }
                QCalendarWidget QWidget#qt_calendar_nextmonth {
                    qproperty-text: "‚ñ∂";
                }
                QCalendarWidget QWidget { 
                    alternate-background-color: white;
                }
                QCalendarWidget QAbstractItemView:disabled {
                    color: #cbd5e0;
                }
            """)
        
        # Takvimi d√ºƒümenin altƒ±nda g√∂ster
        button_pos = self.date_button.mapToGlobal(self.date_button.rect().bottomLeft())
        screen = QApplication.primaryScreen().geometry()
        
        # Takvimin ekrandan ta≈ümasƒ±nƒ± √∂nle
        calendar_x = min(button_pos.x(), screen.right() - calendar.width())
        calendar_y = min(button_pos.y(), screen.bottom() - calendar.height())
        
        # Eƒüer takvim sol kenara ta≈üƒ±yorsa, x koordinatƒ±nƒ± 0'a ayarla
        calendar_x = max(calendar_x, screen.left())
        
        calendar.move(calendar_x, calendar_y)
        
        def on_date_selected():
            self.selected_date = calendar.selectedDate()
            self.date_button.setText(f"üìÖ {self.selected_date.toString('dd.MM.yy')}")
            calendar.close()
            
        calendar.clicked.connect(on_date_selected)
        calendar.show()
        
    def add_task(self):
        title = self.task_input.text().strip()
        if not title:
            QMessageBox.warning(self, "Uyarƒ±", "L√ºtfen bir g√∂rev girin!")
            return
            
        category = self.category_combo.currentText()
        priority = self.priority_combo.currentText()
        due_date = self.selected_date.toString("yyyy-MM-dd")
        
        self.cursor.execute('''
        INSERT INTO tasks (title, category, priority, due_date)
        VALUES (?, ?, ?, ?)
        ''', (title, category, priority, due_date))
        self.conn.commit()
        task_id = self.cursor.lastrowid
        
        play_add_sound()
        
        self.task_input.clear()
        self.selected_date = QDate.currentDate()
        self.date_button.setText("üìÖ Tarih Se√ß")
        self.load_tasks()
        
    def load_tasks(self):
        self.todo_list.clear()
        self.doing_list.clear()
        self.done_list.clear()
        self.wishlist.clear()
        
        self.cursor.execute("SELECT * FROM tasks WHERE completed = 0")
        tasks = self.cursor.fetchall()
        
        for task in tasks:
            card_widget = TaskCard(task[0], task[1], task[2], task[3], task[4])
            # Kart olu≈üturulur olu≈üturulmaz tema ayarƒ±nƒ± uygula
            card_widget.updateStyle(self.dark_theme)
            
            item = QListWidgetItem()
            item.setSizeHint(card_widget.sizeHint())
            
            if task[2] == "Yapƒ±lacak":
                self.todo_list.addItem(item)
                self.todo_list.setItemWidget(item, card_widget)
            elif task[2] == "Yapƒ±lƒ±yor":
                self.doing_list.addItem(item)
                self.doing_list.setItemWidget(item, card_widget)
            elif task[2] == "Bitti":
                self.done_list.addItem(item)
                self.done_list.setItemWidget(item, card_widget)
            elif task[2] == "Dilek Listesi":
                self.wishlist.addItem(item)
                self.wishlist.setItemWidget(item, card_widget)
                
    def update_task_category(self, task_id, new_category):
        self.cursor.execute("""
            UPDATE tasks 
            SET category = ? 
            WHERE id = ?
        """, (new_category, task_id))
        self.conn.commit()
        
    def edit_task(self, task_card):
        # D√ºzenleme penceresi olu≈ütur
        edit_dialog = QDialog(self)
        edit_dialog.setWindowTitle("G√∂revi D√ºzenle")
        edit_dialog.setMinimumWidth(400)
        edit_dialog.setStyleSheet("""
            QDialog {
                background-color: """ + ("#2d3748" if self.dark_theme else "white") + """;
                border-radius: 8px;
            }
            QLabel {
                color: """ + ("white" if self.dark_theme else "#2d3748") + """;
                font-size: 12px;
            }
        """)
        
        layout = QVBoxLayout(edit_dialog)
        layout.setSpacing(15)
        
        # Ba≈ülƒ±k d√ºzenleme
        title_label = QLabel("üìù G√∂rev Ba≈ülƒ±ƒüƒ±:")
        title_input = QLineEdit(task_card.title)
        title_input.setStyleSheet(self.task_input.styleSheet())
        title_input.setFont(QFont("Segoe UI", 11))
        
        # √ñncelik d√ºzenleme
        priority_label = QLabel("üéØ √ñncelik:")
        priority_combo = QComboBox()
        priority_combo.addItems(["D√º≈ü√ºk", "Orta", "Y√ºksek"])
        priority_combo.setCurrentText(task_card.priority)
        priority_combo.setStyleSheet(self.priority_combo.styleSheet())
        priority_combo.setFont(QFont("Segoe UI", 11))
        
        # Kategori d√ºzenleme
        category_label = QLabel("üìã Kategori:")
        category_combo = QComboBox()
        category_combo.addItems(["Yapƒ±lacak", "Yapƒ±lƒ±yor", "Bitti", "Dilek Listesi"])
        category_combo.setCurrentText(task_card.category)
        category_combo.setStyleSheet(self.category_combo.styleSheet())
        category_combo.setFont(QFont("Segoe UI", 11))
        
        # Tarih d√ºzenleme
        date_label = QLabel("üìÖ Tarih:")
        selected_date = QDate.fromString(task_card.due_date, "yyyy-MM-dd")
        date_edit = QPushButton(f"üìÖ {selected_date.toString('dd.MM.yy')}")
        date_edit.setStyleSheet(self.date_button.styleSheet())
        date_edit.setFont(QFont("Segoe UI", 11))
        date_edit.setCursor(Qt.PointingHandCursor)
        
        def show_calendar():
            calendar = QCalendarWidget(edit_dialog)
            calendar.setMinimumDate(QDate.currentDate())
            calendar.setSelectedDate(selected_date)
            calendar.setWindowFlags(Qt.Popup | Qt.FramelessWindowHint)
            calendar.setFixedWidth(400)
            
            # Takvim stilini ayarla
            if self.dark_theme:
                calendar.setStyleSheet("""
                    QCalendarWidget {
                        background-color: #2d3748;
                        border: 2px solid #4a5568;
                        border-radius: 12px;
                    }
                    QCalendarWidget QToolButton {
                        color: white;
                        background-color: transparent;
                        padding: 8px;
                        border: none;
                        border-radius: 4px;
                        font-size: 14px;
                        font-weight: bold;
                    }
                    QCalendarWidget QToolButton:hover {
                        background-color: #4a5568;
                    }
                    QCalendarWidget QMenu {
                        background-color: #2d3748;
                        color: white;
                        border: 1px solid #4a5568;
                        border-radius: 4px;
                    }
                    QCalendarWidget QSpinBox {
                        color: white;
                        background-color: #2d3748;
                        selection-background-color: #4299e1;
                        selection-color: white;
                        border: 1px solid #4a5568;
                        border-radius: 4px;
                        padding: 2px;
                    }
                    QCalendarWidget QTableView {
                        background-color: #2d3748;
                        selection-background-color: #4299e1;
                        selection-color: white;
                        outline: none;
                    }
                    QCalendarWidget QAbstractItemView:enabled {
                        color: white;
                        background-color: #2d3748;
                        selection-background-color: #4299e1;
                        selection-color: white;
                    }
                    QCalendarWidget QWidget#qt_calendar_navigationbar {
                        background-color: #1a202c;
                        border-top-left-radius: 12px;
                        border-top-right-radius: 12px;
                        padding: 4px;
                    }
                    QCalendarWidget QWidget#qt_calendar_prevmonth,
                    QCalendarWidget QWidget#qt_calendar_nextmonth {
                        color: white;
                        qproperty-icon: none;
                        min-width: 32px;
                        max-width: 32px;
                        min-height: 32px;
                        max-height: 32px;
                    }
                    QCalendarWidget QWidget#qt_calendar_prevmonth {
                        qproperty-text: "‚óÄ";
                    }
                    QCalendarWidget QWidget#qt_calendar_nextmonth {
                        qproperty-text: "‚ñ∂";
                    }
                    QCalendarWidget QWidget { 
                        alternate-background-color: #2d3748;
                    }
                    QCalendarWidget QAbstractItemView:disabled {
                        color: #4a5568;
                    }
                """)
            else:
                calendar.setStyleSheet("""
                    QCalendarWidget {
                        background-color: white;
                        border: 2px solid #e2e8f0;
                        border-radius: 12px;
                    }
                    QCalendarWidget QToolButton {
                        color: #2d3748;
                        background-color: transparent;
                        padding: 8px;
                        border: none;
                        border-radius: 4px;
                        font-size: 14px;
                        font-weight: bold;
                    }
                    QCalendarWidget QToolButton:hover {
                        background-color: #edf2f7;
                    }
                    QCalendarWidget QMenu {
                        background-color: white;
                        color: #2d3748;
                        border: 1px solid #e2e8f0;
                        border-radius: 4px;
                    }
                    QCalendarWidget QSpinBox {
                        color: #2d3748;
                        background-color: white;
                        selection-background-color: #4299e1;
                        selection-color: white;
                        border: 1px solid #e2e8f0;
                        border-radius: 4px;
                        padding: 2px;
                    }
                    QCalendarWidget QTableView {
                        background-color: white;
                        selection-background-color: #4299e1;
                        selection-color: white;
                        outline: none;
                    }
                    QCalendarWidget QAbstractItemView:enabled {
                        color: #2d3748;
                        background-color: white;
                        selection-background-color: #4299e1;
                        selection-color: white;
                    }
                    QCalendarWidget QWidget#qt_calendar_navigationbar {
                        background-color: #f7fafc;
                        border-top-left-radius: 12px;
                        border-top-right-radius: 12px;
                        padding: 4px;
                    }
                    QCalendarWidget QWidget#qt_calendar_prevmonth,
                    QCalendarWidget QWidget#qt_calendar_nextmonth {
                        color: #2d3748;
                        qproperty-icon: none;
                        min-width: 32px;
                        max-width: 32px;
                        min-height: 32px;
                        max-height: 32px;
                    }
                    QCalendarWidget QWidget#qt_calendar_prevmonth {
                        qproperty-text: "‚óÄ";
                    }
                    QCalendarWidget QWidget#qt_calendar_nextmonth {
                        qproperty-text: "‚ñ∂";
                    }
                    QCalendarWidget QWidget { 
                        alternate-background-color: white;
                    }
                    QCalendarWidget QAbstractItemView:disabled {
                        color: #cbd5e0;
                    }
                """)
            
            # Takvimi d√ºƒümenin altƒ±nda g√∂ster
            button_pos = date_edit.mapToGlobal(date_edit.rect().bottomLeft())
            screen = QApplication.primaryScreen().geometry()
            
            # Takvimin ekrandan ta≈ümasƒ±nƒ± √∂nle
            calendar_x = min(button_pos.x(), screen.right() - calendar.width())
            calendar_y = min(button_pos.y(), screen.bottom() - calendar.height())
            
            # Eƒüer takvim sol kenara ta≈üƒ±yorsa, x koordinatƒ±nƒ± 0'a ayarla
            calendar_x = max(calendar_x, screen.left())
            
            calendar.move(calendar_x, calendar_y)
            
            def on_date_selected():
                nonlocal selected_date
                selected_date = calendar.selectedDate()
                date_edit.setText(f"üìÖ {selected_date.toString('dd.MM.yy')}")
                calendar.close()
            
            calendar.clicked.connect(on_date_selected)
            calendar.show()
            
        date_edit.clicked.connect(show_calendar)
        
        # Butonlar
        button_layout = QHBoxLayout()
        save_button = QPushButton("üíæ Kaydet")
        cancel_button = QPushButton("‚ùå ƒ∞ptal")
        
        for button in [save_button, cancel_button]:
            button.setStyleSheet(self.add_button.styleSheet())
            button.setFont(QFont("Segoe UI", 11))
            button.setCursor(Qt.PointingHandCursor)
            button_layout.addWidget(button)
        
        def save_changes():
            # Veritabanƒ±nda g√ºncelle
            self.cursor.execute("""
                UPDATE tasks
                SET title = ?, category = ?, priority = ?, due_date = ?
                WHERE id = ?
            """, (
                title_input.text(),
                category_combo.currentText(),
                priority_combo.currentText(),
                selected_date.toString("yyyy-MM-dd"),
                task_card.task_id
            ))
            self.conn.commit()
            self.load_tasks()  # Listeyi yenile
            edit_dialog.close()
        
        save_button.clicked.connect(save_changes)
        cancel_button.clicked.connect(edit_dialog.close)
        
        # Widget'larƒ± d√ºzene ekle
        for widget in [
            title_label, title_input,
            priority_label, priority_combo,
            category_label, category_combo,
            date_label, date_edit
        ]:
            layout.addWidget(widget)
        
        layout.addLayout(button_layout)
        edit_dialog.exec_()

    def minimize_to_tray(self):
        if self.first_minimize:
            msg = QMessageBox(self)
            msg.setWindowTitle("Ta-Du")
            msg.setText("Uygulama Simge Durumuna K√º√ß√ºlt√ºld√º")
            msg.setInformativeText("Ta-Du uygulamasƒ± g√∂rev √ßubuƒüunun saƒü alt k√∂≈üesindeki simge durumuna k√º√ß√ºlt√ºld√º.\n\nUygulamayƒ± tekrar a√ßmak i√ßin simgeye √ßift tƒ±klayabilirsiniz.")
            msg.setIcon(QMessageBox.Information)
            msg.setStyleSheet("""
                QMessageBox {
                    background-color: """ + ("#2d3748" if self.dark_theme else "white") + """;
                }
                QMessageBox QLabel {
                    color: """ + ("white" if self.dark_theme else "#1a202c") + """;
                    font-size: 12px;
                }
                QPushButton {
                    background-color: """ + ("#4299e1" if self.dark_theme else "#3182ce") + """;
                    color: white;
                    border: none;
                    border-radius: 4px;
                    padding: 8px 16px;
                    font-size: 12px;
                }
                QPushButton:hover {
                    background-color: """ + ("#3182ce" if self.dark_theme else "#2c5282") + """;
                }
            """)
            msg.exec_()
            self.first_minimize = False
        
        self.hide()  # Uygulamayƒ± gizle

    def show_help(self):
        help_dialog = QDialog(self)
        help_dialog.setWindowTitle("Nasƒ±l Kullanƒ±lƒ±r?")
        help_dialog.setMinimumWidth(700)  # Geni≈üliƒüi artƒ±rdƒ±m
        help_dialog.setMinimumHeight(600)  # Y√ºkseklik ekledim
        help_dialog.setStyleSheet("""
            QDialog {
                background-color: """ + ("#2d3748" if self.dark_theme else "white") + """;
                border-radius: 8px;
            }
            QLabel {
                color: """ + ("white" if self.dark_theme else "#2d3748") + """;
                font-size: 13px;
                padding: 5px;
                line-height: 1.6;
            }
            QPushButton {
                background-color: """ + ("#4299e1" if self.dark_theme else "#3182ce") + """;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: """ + ("#3182ce" if self.dark_theme else "#2c5282") + """;
            }
        """)
        
        layout = QVBoxLayout(help_dialog)
        layout.setSpacing(15)
        
        # Yardƒ±m i√ßeriƒüi
        help_text = """
        <div style='margin: 20px;'>
            <h2 style='color: """ + ("white" if self.dark_theme else "#1a202c") + """; font-size: 24px; margin-bottom: 20px;'>
                üéØ Ta-Du Kullanƒ±m Kƒ±lavuzu
            </h2>
            
            <h3 style='color: """ + ("white" if self.dark_theme else "#2d3748") + """; font-size: 18px; margin-top: 25px;'>
                üìù G√∂rev Ekleme ve D√ºzenleme
            </h3>
            <p style='margin-left: 20px; line-height: 1.8;'>
                ‚Ä¢ √úst kƒ±sƒ±mdaki g√∂rev giri≈ü alanƒ±na g√∂rev ba≈ülƒ±ƒüƒ±nƒ± yazƒ±n<br>
                ‚Ä¢ √ñncelik se√ßin: D√º≈ü√ºk üü¢, Orta üü°, Y√ºksek üî¥<br>
                ‚Ä¢ Kategori se√ßin: Yapƒ±lacak, Yapƒ±lƒ±yor, Bitti, Dilek Listesi<br>
                ‚Ä¢ Tarih se√ßin: G√∂revin tamamlanmasƒ± gereken tarihi belirleyin<br>
                ‚Ä¢ "‚ûï Ekle" butonuna tƒ±klayƒ±n veya Enter tu≈üuna basƒ±n
            </p>
            
            <h3 style='color: """ + ("white" if self.dark_theme else "#2d3748") + """; font-size: 18px; margin-top: 25px;'>
                ‚å®Ô∏è Klavye Kƒ±sayollarƒ±
            </h3>
            <p style='margin-left: 20px; line-height: 1.8;'>
                ‚Ä¢ <b>E tu≈üu:</b> Se√ßili g√∂revi d√ºzenleme penceresini a√ßar<br>
                ‚Ä¢ <b>Delete tu≈üu:</b> Se√ßili g√∂revi silmek i√ßin onay penceresi a√ßar<br>
                ‚Ä¢ <b>Shift + Saƒü Ok:</b> G√∂revi bir sonraki kategoriye ta≈üƒ±r<br>
                &nbsp;&nbsp;&nbsp;(Yapƒ±lacak ‚Üí Yapƒ±lƒ±yor ‚Üí Bitti ‚Üí Dilek Listesi)<br>
                ‚Ä¢ <b>Shift + Sol Ok:</b> G√∂revi bir √∂nceki kategoriye ta≈üƒ±r<br>
                &nbsp;&nbsp;&nbsp;(Dilek Listesi ‚Üí Bitti ‚Üí Yapƒ±lƒ±yor ‚Üí Yapƒ±lacak)<br>
                ‚Ä¢ <b>Alt + Tab:</b> Uygulamayƒ± simge durumuna k√º√ß√ºlt√ºr
            </p>
            
            <h3 style='color: """ + ("white" if self.dark_theme else "#2d3748") + """; font-size: 18px; margin-top: 25px;'>
                üñ±Ô∏è Fare ƒ∞≈ülemleri
            </h3>
            <p style='margin-left: 20px; line-height: 1.8;'>
                ‚Ä¢ <b>Saƒü Tƒ±k Men√ºs√º:</b><br>
                &nbsp;&nbsp;&nbsp;‚úèÔ∏è D√ºzenle: G√∂revi d√ºzenleme penceresini a√ßar<br>
                &nbsp;&nbsp;&nbsp;üóëÔ∏è Sil: G√∂revi silmek i√ßin onay penceresi a√ßar<br>
                &nbsp;&nbsp;&nbsp;üì¶ Ta≈üƒ±: G√∂revi ba≈üka bir kategoriye ta≈üƒ±r<br>
                ‚Ä¢ <b>S√ºr√ºkle-Bƒ±rak:</b> G√∂revleri kategoriler arasƒ±nda ta≈üƒ±yabilirsiniz<br>
                ‚Ä¢ <b>Sistem Tray ƒ∞konu:</b><br>
                &nbsp;&nbsp;&nbsp;‚ûú √áift tƒ±klama: Uygulamayƒ± tam ekran a√ßar<br>
                &nbsp;&nbsp;&nbsp;‚ûú Saƒü tƒ±k: G√∂ster ve √áƒ±kƒ±≈ü se√ßeneklerini g√∂sterir
            </p>
            
            <h3 style='color: """ + ("white" if self.dark_theme else "#2d3748") + """; font-size: 18px; margin-top: 25px;'>
                üìã Kategoriler
            </h3>
            <p style='margin-left: 20px; line-height: 1.8;'>
                ‚Ä¢ <b>üìã Yapƒ±lacak:</b> Hen√ºz ba≈ülanmamƒ±≈ü g√∂revler<br>
                ‚Ä¢ <b>üîÑ Yapƒ±lƒ±yor:</b> √úzerinde √ßalƒ±≈üƒ±lan g√∂revler<br>
                ‚Ä¢ <b>‚úÖ Bitti:</b> Tamamlanan g√∂revler<br>
                ‚Ä¢ <b>‚≠ê Dilek Listesi:</b> ƒ∞leride yapƒ±lmasƒ± planlanan g√∂revler
            </p>
            
            <h3 style='color: """ + ("white" if self.dark_theme else "#2d3748") + """; font-size: 18px; margin-top: 25px;'>
                üé® √ñzelle≈ütirme ve G√∂r√ºn√ºm
            </h3>
            <p style='margin-left: 20px; line-height: 1.8;'>
                ‚Ä¢ <b>Tema Deƒüi≈ütirme:</b><br>
                &nbsp;&nbsp;&nbsp;‚ûú üé® Tema Deƒüi≈ütir butonu ile a√ßƒ±k/koyu tema arasƒ±nda ge√ßi≈ü yapƒ±n<br>
                ‚Ä¢ <b>√ñncelik Renkleri:</b><br>
                &nbsp;&nbsp;&nbsp;‚ûú Y√ºksek: üî¥ Kƒ±rmƒ±zƒ± tonlarƒ±<br>
                &nbsp;&nbsp;&nbsp;‚ûú Orta: üü° Turuncu tonlarƒ±<br>
                &nbsp;&nbsp;&nbsp;‚ûú D√º≈ü√ºk: üü¢ Ye≈üil tonlarƒ±
            </p>
            
            <h3 style='color: """ + ("white" if self.dark_theme else "#2d3748") + """; font-size: 18px; margin-top: 25px;'>
                üí° ƒ∞pu√ßlarƒ±
            </h3>
            <p style='margin-left: 20px; line-height: 1.8;'>
                ‚Ä¢ Kapatma (‚úñ) butonuna tƒ±kladƒ±ƒüƒ±nƒ±zda uygulama sistem tepsisine k√º√ß√ºl√ºr<br>
                ‚Ä¢ G√∂revlerinizi √∂nceliklerine g√∂re renklendirerek √∂nem derecesini belirleyin<br>
                ‚Ä¢ Tarihi ge√ßmi≈ü g√∂revler i√ßin tarih kƒ±smƒ± kƒ±rmƒ±zƒ± ile vurgulanƒ±r<br>
                ‚Ä¢ G√∂revleri s√ºr√ºkleyerek kategoriler arasƒ±nda hƒ±zlƒ±ca ta≈üƒ±yabilirsiniz<br>
                ‚Ä¢ Sistem tepsisindeki simgeye √ßift tƒ±klayarak uygulamayƒ± tekrar a√ßabilirsiniz
            </p>
        </div>
        """
        
        help_label = QLabel(help_text)
        help_label.setWordWrap(True)
        help_label.setTextFormat(Qt.RichText)
        
        # Scroll Area
        scroll = QScrollArea()
        scroll.setWidget(help_label)
        scroll.setWidgetResizable(True)
        scroll.setStyleSheet("""
            QScrollArea {
                border: none;
                background: transparent;
            }
            QScrollBar:vertical {
                border: none;
                background: """ + ("#4a5568" if self.dark_theme else "#e2e8f0") + """;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background: """ + ("#718096" if self.dark_theme else "#cbd5e0") + """;
                border-radius: 6px;
            }
            QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {
                border: none;
                background: none;
            }
        """)
        
        layout.addWidget(scroll)
        
        # Kapat butonu
        close_button = QPushButton("‚úîÔ∏è Anladƒ±m")
        close_button.clicked.connect(help_dialog.close)
        close_button.setCursor(Qt.PointingHandCursor)
        layout.addWidget(close_button)
        
        help_dialog.exec_()

    def show_developer(self):
        dev_dialog = QDialog(self)
        dev_dialog.setWindowTitle("Geli≈ütirici Hakkƒ±nda")
        dev_dialog.setMinimumWidth(500)
        dev_dialog.setStyleSheet("""
            QDialog {
                background-color: """ + ("#2d3748" if self.dark_theme else "white") + """;
                border-radius: 8px;
            }
            QLabel {
                color: """ + ("white" if self.dark_theme else "#2d3748") + """;
                font-size: 13px;
                padding: 5px;
                line-height: 1.6;
            }
            QPushButton {
                background-color: """ + ("#4299e1" if self.dark_theme else "#3182ce") + """;
                color: white;
                border: none;
                border-radius: 4px;
                padding: 8px 16px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: """ + ("#3182ce" if self.dark_theme else "#2c5282") + """;
            }
            QWidget#linkWidget {
                background-color: """ + ("#4a5568" if self.dark_theme else "#edf2f7") + """;
                border-radius: 8px;
                padding: 15px;
                margin: 10px;
            }
        """)
        
        layout = QVBoxLayout(dev_dialog)
        layout.setSpacing(20)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Ba≈ülƒ±k
        title_label = QLabel("üë®‚Äçüíª Geli≈ütirici Bilgileri")
        title_label.setFont(QFont("Segoe UI", 16, QFont.Bold))
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # ƒ∞sim
        name_container = QWidget()
        name_container.setObjectName("linkWidget")
        name_layout = QHBoxLayout(name_container)
        name_layout.setContentsMargins(15, 15, 15, 15)
        
        name_icon = QLabel("üë§")
        name_icon.setFont(QFont("Segoe UI", 16))
        name_text = QLabel("Taha Mehel")
        name_text.setFont(QFont("Segoe UI", 12, QFont.Bold))
        
        name_layout.addWidget(name_icon)
        name_layout.addWidget(name_text)
        name_layout.addStretch()
        layout.addWidget(name_container)
        
        # E-posta
        email_container = QWidget()
        email_container.setObjectName("linkWidget")
        email_layout = QHBoxLayout(email_container)
        email_layout.setContentsMargins(15, 15, 15, 15)
        
        email_icon = QLabel("üìß")
        email_icon.setFont(QFont("Segoe UI", 16))
        email_text = QLabel("tahamehel1@gmail.com")
        email_text.setFont(QFont("Segoe UI", 12))
        
        email_layout.addWidget(email_icon)
        email_layout.addWidget(email_text)
        email_layout.addStretch()
        layout.addWidget(email_container)
        
        # GitHub
        github_container = QWidget()
        github_container.setObjectName("linkWidget")
        github_layout = QHBoxLayout(github_container)
        github_layout.setContentsMargins(15, 15, 15, 15)
        
        github_icon = QLabel("üåê")
        github_icon.setFont(QFont("Segoe UI", 16))
        github_text = QLabel("github.com/tahamhl")
        github_text.setFont(QFont("Segoe UI", 12))
        
        github_layout.addWidget(github_icon)
        github_layout.addWidget(github_text)
        github_layout.addStretch()
        layout.addWidget(github_container)
        
        # Website
        website_container = QWidget()
        website_container.setObjectName("linkWidget")
        website_layout = QHBoxLayout(website_container)
        website_layout.setContentsMargins(15, 15, 15, 15)
        
        website_icon = QLabel("üåç")
        website_icon.setFont(QFont("Segoe UI", 16))
        website_text = QLabel("tahamehel.tr")
        website_text.setFont(QFont("Segoe UI", 12))
        
        website_layout.addWidget(website_icon)
        website_layout.addWidget(website_text)
        website_layout.addStretch()
        layout.addWidget(website_container)
        
        # Bo≈üluk ekle
        layout.addStretch()
        
        # Kapat butonu
        close_button = QPushButton("‚úîÔ∏è Tamam")
        close_button.clicked.connect(dev_dialog.close)
        close_button.setCursor(Qt.PointingHandCursor)
        layout.addWidget(close_button)
        
        dev_dialog.exec_()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    init_sounds()  # Sesleri ba≈ülangƒ±√ßta y√ºkle
    window = TodoApp()
    window.show()
    sys.exit(app.exec_()) 